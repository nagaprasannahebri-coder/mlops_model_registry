name: MLOps Model Registry Pipeline

on:
  workflow_dispatch:      # Manual trigger via GitHub Actions UI
 

jobs:
  deploy-pipeline:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Set up Python 3.10
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3Ô∏è‚É£ Install dependencies
      - name: Install Dependencies
        run: |
          pip install --no-cache-dir -r requirements.txt
          pip install snowflake-connector-python python-dotenv

      # 4Ô∏è‚É£ Debug Snowflake Environment (optional, helps confirm secrets load)
      - name: Debug Snowflake Environment
        run: |
          echo "üîç Checking environment variables..."
          echo "Account: $SNOWFLAKE_ACCOUNT"
          echo "Warehouse: $SNOWFLAKE_WAREHOUSE"
          echo "Database: $SNOWFLAKE_DATABASE"
          echo "Schema: $SNOWFLAKE_SCHEMA"
        env:
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}

      # 5Ô∏è‚É£ Trigger Snowflake ML pipeline (using trigger_pipeline.py)
      - name: Trigger Snowflake ML Pipeline
        env:
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
          SNOWFLAKE_STAGE: ${{ secrets.SNOWFLAKE_STAGE }}
        run: python trigger_pipeline.py

      # 6Ô∏è‚É£ Build Docker image for FastAPI serving
      - name: Build Docker Image
        run: docker build -t baseline-model-api .

      # 7Ô∏è‚É£ Run container and perform health check
      - name: Run and Check API Health
        id: run_container
        run: |
          echo "üê≥ Running Docker container for model serving..."
          CONTAINER_ID=$(docker run -d -p 8055:8055 \
            -e SNOWFLAKE_USER="${{ secrets.SNOWFLAKE_USER }}" \
            -e SNOWFLAKE_PASSWORD="${{ secrets.SNOWFLAKE_PASSWORD }}" \
            -e SNOWFLAKE_ACCOUNT="${{ secrets.SNOWFLAKE_ACCOUNT }}" \
            -e SNOWFLAKE_WAREHOUSE="${{ secrets.SNOWFLAKE_WAREHOUSE }}" \
            -e SNOWFLAKE_DATABASE="${{ secrets.SNOWFLAKE_DATABASE }}" \
            -e SNOWFLAKE_SCHEMA="${{ secrets.SNOWFLAKE_SCHEMA }}" \
            -e SNOWFLAKE_STAGE="${{ secrets.SNOWFLAKE_STAGE }}" \
            baseline-model-api)
          echo "Container started: $CONTAINER_ID"

          echo "‚è≥ Waiting for API to start..."
          sleep 25

          echo "ü©∫ Checking FastAPI health endpoint..."
          for i in {1..10}; do
            if curl -s http://127.0.0.1:8055/ | grep -q "ok"; then
              echo "‚úÖ API is healthy!"
              echo "container_id=$CONTAINER_ID" >> $GITHUB_ENV
              exit 0
            fi
            echo "Attempt $i: API not ready yet, retrying..."
            sleep 5
          done

          echo "‚ùå API did not respond after retries."
          docker logs $CONTAINER_ID
          docker stop $CONTAINER_ID
          exit 1

      # 8Ô∏è‚É£ Stop and clean up the container
      - name: Stop and Clean Up Container
        if: always()
        run: |
          if [ -n "$CONTAINER_ID" ]; then
            echo "üßπ Stopping container $CONTAINER_ID..."
            docker stop $CONTAINER_ID
            docker rm $CONTAINER_ID
          else
            echo "No container to clean up."
          fi

      # 9Ô∏è‚É£ (Optional) Push Docker image to GitHub Container Registry
      - name: Push Docker Image to GHCR
        if: success()
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker tag baseline-model-api ghcr.io/${{ github.repository_owner }}/baseline-model-api:latest
          docker push ghcr.io/${{ github.repository_owner }}/baseline-model-api:latest
