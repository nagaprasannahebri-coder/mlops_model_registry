name: Snowflake End-to-End Model Pipeline (Latest Model Fix)

on:
  push:
    branches:
      - main

jobs:
  run-snowflake-cli:
    runs-on: ubuntu-latest
    name: Trigger Tasks ‚Üí Verify ‚Üí Fetch Latest Model ‚Üí Upload Artifact

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Install Snowflake CLI
      - name: Install Snowflake CLI
        run: |
          echo "üß∞ Installing Snowflake CLI..."
          pip install --upgrade snowflake-cli-labs
          snow --version

      # 3Ô∏è‚É£ Configure Snowflake credentials
      - name: Configure Snowflake credentials
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
        run: |
          mkdir -p ~/.snowflake
          cat <<EOF > ~/.snowflake/config.toml
          [connections.default]
          account = "${SNOWFLAKE_ACCOUNT}"
          user = "${SNOWFLAKE_USER}"
          password = "${SNOWFLAKE_PASSWORD}"
          role = "${SNOWFLAKE_ROLE}"
          warehouse = "${SNOWFLAKE_WAREHOUSE}"
          database = "${SNOWFLAKE_DATABASE}"
          schema = "${SNOWFLAKE_SCHEMA}"
          EOF
          chmod 600 ~/.snowflake/config.toml
          echo "‚úÖ Snowflake credentials configured."

      # 4Ô∏è‚É£ Verify connection context
      - name: Debug active Snowflake context
        run: |
          echo "üîç Verifying Snowflake session context..."
          snow sql -q "SELECT CURRENT_DATABASE(), CURRENT_SCHEMA(), CURRENT_ROLE();" --format table

      # 5Ô∏è‚É£ Trigger the Snowflake ML pipeline
      - name: Trigger ML pipeline (root task)
        run: |
          echo "üöÄ Executing ML pipeline..."
          snow sql -q "
            USE WAREHOUSE MLOPS_WH;
            USE DATABASE POWERCONSUMPTION;
            USE SCHEMA PUBLIC;
            EXECUTE TASK TASK_1_DATA_INGESTION;
          "
          echo "‚úÖ Pipeline triggered successfully."

      # 6Ô∏è‚É£ Wait for TASK_3_MODEL_TRAINING success
      - name: Wait for TASK_3_MODEL_TRAINING to succeed
        run: |
          echo "‚è≥ Waiting for TASK_3_MODEL_TRAINING success..."
          ATTEMPTS=20
          SLEEP_SEC=30
          i=1
          while [ $i -le $ATTEMPTS ]; do
            count=$(snow s
