name: Snowflake End-to-End Model Pipeline (Auto JSON Fix)

on:
  push:
    branches:
      - main

jobs:
  run-snowflake-cli:
    runs-on: ubuntu-latest
    name: Trigger ‚Üí Wait ‚Üí Fetch Model ‚Üí Upload Artifact

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Install Snowflake CLI
      - name: Install Snowflake CLI
        run: |
          echo "üß∞ Installing Snowflake CLI..."
          pip install --upgrade snowflake-cli-labs jq
          snow --version

      # 3Ô∏è‚É£ Configure Snowflake credentials
      - name: Configure Snowflake credentials
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
        run: |
          mkdir -p ~/.snowflake
          cat <<EOF > ~/.snowflake/config.toml
          [connections.default]
          account = "${SNOWFLAKE_ACCOUNT}"
          user = "${SNOWFLAKE_USER}"
          password = "${SNOWFLAKE_PASSWORD}"
          role = "${SNOWFLAKE_ROLE}"
          warehouse = "${SNOWFLAKE_WAREHOUSE}"
          database = "${SNOWFLAKE_DATABASE}"
          schema = "${SNOWFLAKE_SCHEMA}"
          EOF
          chmod 600 ~/.snowflake/config.toml
          echo "‚úÖ Snowflake credentials configured."

      # 4Ô∏è‚É£ Verify connection context
      - name: Verify active Snowflake context
        run: |
          echo "üîç Checking Snowflake session context..."
          snow sql -q "SELECT CURRENT_DATABASE(), CURRENT_SCHEMA(), CURRENT_ROLE();" --format table

      # 5Ô∏è‚É£ Trigger ML pipeline
      - name: Trigger Snowflake ML pipeline
        run: |
          echo "üöÄ Executing ML pipeline (root task)..."
          snow sql -q "
            USE WAREHOUSE MLOPS_WH;
            USE DATABASE POWERCONSUMPTION;
            USE SCHEMA PUBLIC;
            EXECUTE TASK TASK_1_DATA_INGESTION;
          "
          echo "‚úÖ Root task executed."

      # 6Ô∏è‚É£ Wait for TASK_3_MODEL_TRAINING to succeed (linter-safe)
      - name: Wait for TASK_3_MODEL_TRAINING success
        shell: bash
        run: |
          echo "‚è≥ Waiting for TASK_3_MODEL_TRAINING success..."
          ATTEMPTS=20
          SLEEP_SEC=30
          i=1
          while [ $i -le $ATTEMPTS ]; do
            count=$(snow sql --format csv -q "SELECT COUNT(*) FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY(SCHEDULED_TIME_RANGE_START => DATEADD('minute', -60, CURRENT_TIMESTAMP()))) WHERE NAME = 'TASK_3_MODEL_TRAINING' AND STATE = 'SUCCEEDED';" | tail -n +2 | cut -d',' -f1)

            echo "üîé success_count(last 60m) = ${count}"
            if [ "${count}" != "0" ]; then
              echo "‚úÖ Training task succeeded recently."
              break
            fi

            i=$((i+1))
            echo "‚Ä¶not done yet, sleeping ${SLEEP_SEC}s"
            sleep ${SLEEP_SEC}
          done

          if [ "${count}" = "0" ]; then
            echo "‚ùå Training task did not report success in time."
            exit 1
          fi

      # 7Ô∏è‚É£ List ONNX models in stage
      - name: List ONNX files in stage
        run: |
          echo "üìú Listing ONNX models in stage..."
          snow sql -q "
            USE DATABASE POWERCONSUMPTION;
            USE SCHEMA PUBLIC;
            LIST @POWERCONSUMPTION.PUBLIC.ML_MODELS_STAGE PATTERN='.*\\.onnx';
          " --format table

      # 8Ô∏è‚É£ Fetch newest ONNX model (query_id auto-detect fix)
      - name: Download newest ONNX model
        run: |
          echo "üì• Fetching latest ONNX model (auto-detect JSON)..."
          mkdir -p models

          # Step 1: Run LIST and capture query ID safely
          query_id=$(snow sql -q "
            USE DATABASE POWERCONSUMPTION;
            USE SCHEMA PUBLIC;
            LIST @POWERCONSUMPTION.PUBLIC.ML_MODELS_STAGE PATTERN='.*\\.onnx';
          " --format json | jq -r 'if type=="array" then .[0].query_id else .query_id end')

          if [ -z "$query_id" ] || [ "$query_id" == "null" ]; then
            echo "‚ùå Failed to fetch query ID from LIST command!"
            echo "üîç Debugging Snowflake JSON output for inspection:"
            snow sql -q "
              USE DATABASE POWERCONSUMPTION;
              USE SCHEMA PUBLIC;
              LIST @POWERCONSUMPTION.PUBLIC.ML_MODELS_STAGE PATTERN='.*\\.onnx';
            " --format json | head -n 50
            exit 1
          fi

          echo "‚úÖ Captured query ID: $query_id"

          # Step 2: Run RESULT_SCAN using captured query ID
          latest_file=$(snow sql -q "
            SELECT name 
            FROM TABLE(RESULT_SCAN('$query_id'))
            ORDER BY last_modified DESC
            LIMIT 1;
          " --format csv | tail -n +2 | head -n1 | cut -d',' -f1)

          if [ -z "$latest_file" ]; then
            echo "‚ùå No ONNX files found in stage!"
            exit 1
          fi

          clean_file=${latest_file#ml_models_stage/}
          echo "‚úÖ Latest ONNX file: $clean_file"
          snow sql -q "GET @POWERCONSUMPTION.PUBLIC.ML_MODELS_STAGE/$clean_file file://./models/"
          echo "‚úÖ Model downloaded into ./models"

      # 9Ô∏è‚É£ Verify downloaded model
      - name: Verify ONNX download
        run: |
          echo "üîé Verifying ONNX model..."
          ls -lh models || true
          if ! ls models/*.onnx 1>/dev/null 2>&1; then
            echo "‚ùå No .onnx model found."
            exit 1
          fi
          echo "‚úÖ ONNX model is present."

      # üîü Upload model as GitHub artifact
      - name: Upload exported ONNX model
        uses: actions/upload-artifact@v4
        with:
          name: exported-onnx-model
          path: models/
          retention-days: 7

      # 11Ô∏è‚É£ Final Summary
      - name: Summary
        run: |
          echo "‚úÖ End-to-end Snowflake pipeline completed successfully!"
          echo "‚úÖ Latest ONNX model downloaded and stored as artifact."
