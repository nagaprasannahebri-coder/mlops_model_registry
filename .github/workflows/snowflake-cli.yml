name: Snowflake Model Registry End-to-End Pipeline

on:
  workflow_dispatch:  # Manual trigger only

jobs:
  run-snowflake-cli:
    runs-on: ubuntu-latest
    name: Trigger ML Pipeline ‚Üí Verify Task ‚Üí Export Latest Model ‚Üí Upload Artifact

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: üöÄ Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Install Snowflake CLI (`snow`)
      - name: üß∞ Install Snowflake CLI
        uses: snowflakedb/snowflake-cli-action@v2.0
        with:
          custom-github-ref: "main"

      # 3Ô∏è‚É£ Add CLI to PATH
      - name: ü©µ Add Snowflake CLI to PATH
        run: echo "/home/runner/.local/share/uv/tools/snowflake-cli/bin" >> $GITHUB_PATH

      # 4Ô∏è‚É£ Configure Snowflake connection
      - name: ‚öôÔ∏è Setup Snowflake Config
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
        run: |
          mkdir -p ~/.snowflake
          cat <<EOF > ~/.snowflake/config.toml
          [connections.default]
          account = "${SNOWFLAKE_ACCOUNT}"
          user = "${SNOWFLAKE_USER}"
          password = "${SNOWFLAKE_PASSWORD}"
          role = "${SNOWFLAKE_ROLE}"
          warehouse = "${SNOWFLAKE_WAREHOUSE}"
          database = "${SNOWFLAKE_DATABASE}"
          schema = "${SNOWFLAKE_SCHEMA}"
          EOF
          chmod 600 ~/.snowflake/config.toml
          echo "‚úÖ Snowflake config.toml created."

      # 5Ô∏è‚É£ Verify CLI installation
      - name: üîç Verify Snowflake CLI
        run: |
          which snow
          snow --version

      # 6Ô∏è‚É£ Trigger Snowflake ML pipeline task
      - name: üöÄ Trigger Snowflake ML Pipeline
        run: |
          echo "üöÄ Executing ML pipeline task..."
          snow sql -q "USE WAREHOUSE MLOPS_WH; USE DATABASE POWERCONSUMPTION; USE SCHEMA PUBLIC; EXECUTE TASK TASK_1_DATA_INGESTION;"
          echo "‚úÖ ML pipeline triggered successfully!"

      # 7Ô∏è‚É£ Wait for task completion
      - name: ‚è≥ Wait for pipeline completion
        run: |
          echo "‚è≥ Waiting 15 seconds before checking task status..."
          sleep 15

      # 8Ô∏è‚É£ Check Snowflake task execution status
      - name: üìä Check Task Execution Status
        run: |
          echo "üìä Checking task status in Snowflake..."
          snow sql -q "USE DATABASE POWERCONSUMPTION; USE SCHEMA PUBLIC; SHOW TASKS LIKE 'TASK_1_DATA_INGESTION';" --format table
          echo "‚úÖ Task status fetched successfully."

      # 9Ô∏è‚É£ Identify latest registered model
      - name: üîç Identify Latest Model in Registry
        run: |
          echo "üì¶ Checking latest registered model..."
          mkdir -p models
          latest_model=$(snow sql -q "SHOW MODELS IN SCHEMA PUBLIC;" --format csv | grep POWER_CONSUMPTION_MODEL | sort -t',' -k3,3r | head -n1 | cut -d',' -f1 | tr -d '"')
          if [ -z "$latest_model" ]; then
            echo "‚ùå No models found in Model Registry!"
            exit 1
          fi
          echo "‚úÖ Latest registered model: $latest_model"
          echo "LATEST_MODEL=$latest_model" >> $GITHUB_ENV

      # üîü Export model from Snowflake Model Registry
      - name: üì§ Export Latest Model from Registry
        run: |
          echo "üì§ Exporting $LATEST_MODEL to ./models directory..."
          snow ml model export $LATEST_MODEL --file-format onnx --output-dir ./models
          echo "‚úÖ Model exported successfully."

      # 11Ô∏è‚É£ Verify export success
      - name: üîç Verify Exported Model
        run: |
          if ls models/*.onnx 1> /dev/null 2>&1; then
            echo "‚úÖ Model file(s) found:"
            ls -lh models
          else
            echo "‚ùå No ONNX model files found in ./models!"
            exit 1
          fi

      # 12Ô∏è‚É£ Upload exported model as artifact
      - name: üì¶ Upload Exported Model Artifact
        uses: actions/upload-artifact@v4
        with:
          name: exported-onnx-model
          path: models/
          retention-days: 7

      # ‚úÖ Final summary
      - name: üìú Summary
        run: |
          echo "‚úÖ End-to-end pipeline completed!"
          echo "‚úÖ Task executed, model exported from registry, and artifact uploaded successfully."



