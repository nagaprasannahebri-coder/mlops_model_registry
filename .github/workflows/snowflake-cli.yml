name: Snowflake CLI Pipeline Trigger

on:
  workflow_dispatch:  # Manual trigger only

jobs:
  run-snowflake-cli:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout your repository
      - name: üöÄ Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Install the official Snowflake CLI
      - name: üß∞ Install Snowflake CLI
        uses: snowflakedb/snowflake-cli-action@v2.0
        with:
          custom-github-ref: "main"

      # 3Ô∏è‚É£ Add CLI binary paths to the PATH environment variable
      - name: ü©µ Add Snowflake CLI to PATH
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "/opt/hostedtoolcache/uv/0.9.1/x86_64" >> $GITHUB_PATH
          echo "‚úÖ PATH updated for Snowflake CLI"

      # 4Ô∏è‚É£ (Optional) Configure Snowflake credentials/config file
      # Place your Snowflake config.toml in the repo root, or skip this if using default config
      - name: ‚öôÔ∏è Setup Snowflake Config
        run: |
          mkdir -p ~/.snowflake
          if [ -f ./config.toml ]; then
            echo "‚úÖ Found config.toml, copying to ~/.snowflake/"
            cp ./config.toml ~/.snowflake/config.toml
          else
            echo "‚ö†Ô∏è config.toml not found, using default config."
          fi

      # 5Ô∏è‚É£ Verify the installation
      - name: üß© Check Snowflake CLI installation
        run: |
          echo "üß© Checking Snowflake CLI installation..."
          which snow || echo "‚ùå snow not found in PATH"
          snow --version || echo "‚ùå Snowflake CLI not responding"

      # 6Ô∏è‚É£ Authenticate (if needed)
      # Use OAUTH / Key pair / Username-password stored as GitHub secrets
      - name: üîê Authenticate with Snowflake
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
        run: |
          echo "üîê Testing connection to Snowflake..."
          snow connection test --account $SNOWFLAKE_ACCOUNT --user $SNOWFLAKE_USER || echo "‚ö†Ô∏è Connection test failed"

      # 7Ô∏è‚É£ Run your Snowflake ML pipeline or SQL script
      - name: üß† Trigger Snowflake ML pipeline
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        run: |
          echo "üöÄ Triggering Snowflake ML pipeline..."
          snow sql -q "CALL ml_pipeline_execute();" || echo "‚ö†Ô∏è Pipeline trigger failed"

      # 8Ô∏è‚É£ Wrap up with logs
      - name: üìú Summarize
        run: |
          echo "‚úÖ Workflow completed!"
