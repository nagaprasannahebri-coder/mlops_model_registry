name: Snowflake Model Auto-Sync + Release (Latest Only)

on:
  push:
    branches:
      - main
  repository_dispatch:
    types: [model_sync]
  workflow_dispatch: # ‚úÖ Manual trigger

permissions:
  contents: write

jobs:
  sync-snowflake-model:
    runs-on: ubuntu-latest

    env:
      SNOWFLAKE_CONNECTIONS_DEFAULT_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}

    steps:
      # 1Ô∏è‚É£ Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2Ô∏è‚É£ Install Snowflake CLI (modern version)
      - name: Install Snowflake CLI
        run: |
          python3 -m pip install --upgrade pip
          pip install --user "snowflake-cli>=3.10.0"
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # 3Ô∏è‚É£ Configure connection
      - name: Configure Snowflake
        run: |
          mkdir -p ~/.snowflake
          cat <<EOF > ~/.snowflake/config.toml
          [connections.default]
          account = "${SNOWFLAKE_CONNECTIONS_DEFAULT_ACCOUNT}"
          user = "${SNOWFLAKE_CONNECTIONS_DEFAULT_USER}"
          password = "${SNOWFLAKE_CONNECTIONS_DEFAULT_PASSWORD}"
          role = "${SNOWFLAKE_CONNECTIONS_DEFAULT_ROLE}"
          warehouse = "${SNOWFLAKE_CONNECTIONS_DEFAULT_WAREHOUSE}"
          database = "${SNOWFLAKE_CONNECTIONS_DEFAULT_DATABASE}"
          schema = "${SNOWFLAKE_CONNECTIONS_DEFAULT_SCHEMA}"
          EOF

      # 4Ô∏è‚É£ Verify Snowflake connection
      - name: Verify Snowflake Connection
        run: |
          snow sql -q "SELECT CURRENT_USER(), CURRENT_DATABASE(), CURRENT_SCHEMA();"

      # 5Ô∏è‚É£ List ONNX files and find the latest
      - name: Find latest ONNX file
        id: latest
        run: |
          echo "üìú Listing ONNX models..."
          json_out=$(snow sql -q "
            LIST @${SNOWFLAKE_CONNECTIONS_DEFAULT_DATABASE}.${SNOWFLAKE_CONNECTIONS_DEFAULT_SCHEMA}.ML_MODELS_STAGE PATTERN='.*.onnx';
          " --format json)

          latest_file=$(echo "$json_out" | jq -r '
            flatten
            | map(select(.name? != null))
            | sort_by(
                ( .last_modified
                  | sub(", "; " ")
                  | strptime("%a %d %b %Y %H:%M:%S GMT")
                  | mktime )
              )
            | reverse
            | .[0].name
          ')

          if [ -z "$latest_file" ] || [ "$latest_file" == "null" ]; then
            echo "‚ùå No ONNX file found!"
            exit 1
          fi

          clean_file=${latest_file#ml_models_stage/}
          echo "‚úÖ Latest model: $clean_file"
          echo "file_name=$clean_file" >> $GITHUB_OUTPUT

      # 6Ô∏è‚É£ Download the latest model only
      - name: Download latest ONNX model
        run: |
          mkdir -p staged_models
          echo "üì• Downloading ${{ steps.latest.outputs.file_name }} ..."
          snow sql -q "GET @${SNOWFLAKE_CONNECTIONS_DEFAULT_DATABASE}.${SNOWFLAKE_CONNECTIONS_DEFAULT_SCHEMA}.ML_MODELS_STAGE/${{ steps.latest.outputs.file_name }} file://staged_models/"
          echo "‚úÖ Downloaded to staged_models/${{ steps.latest.outputs.file_name }}"

      # 7Ô∏è‚É£ Commit and push latest model
      - name: Commit latest model
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add staged_models/
          git commit -m "Add latest model: ${{ steps.latest.outputs.file_name }}" || echo "No changes to commit"
          git push

      # 8Ô∏è‚É£ Create a GitHub release with only the model file
      - name: Create GitHub release (latest model only)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          RELEASE_TAG="model-$(date +'%Y%m%d-%H%M%S')"
          echo "üì¶ Creating release: $RELEASE_TAG"
          gh release create "$RELEASE_TAG" "staged_models/${{ steps.latest.outputs.file_name }}" \
            --title "Model Release ($RELEASE_TAG)" \
            --notes "Latest trained model automatically synced from Snowflake."

      # 9Ô∏è‚É£ Summary
      - name: Summary
        run: echo "‚úÖ Latest model and release successfully published."
