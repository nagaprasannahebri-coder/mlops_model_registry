name: Snowflake CLI End-to-End ML Pipeline

on:
  workflow_dispatch:    # Manual trigger only

jobs:
  run-snowflake-cli:
    runs-on: ubuntu-latest
    name: Trigger ML Pipeline ‚Üí Check Status ‚Üí Download Model ‚Üí Upload Artifact

    steps:
      # 1Ô∏è‚É£ Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Install modern Snowflake CLI (`snow`)
      - name: Install Snowflake CLI
        uses: snowflakedb/snowflake-cli-action@v2.0
        with:
          custom-github-ref: "main"

      # 3Ô∏è‚É£ Add CLI to PATH
      - name: Add Snowflake CLI to PATH
        run: echo "/home/runner/.local/share/uv/tools/snowflake-cli/bin" >> $GITHUB_PATH

      # 4Ô∏è‚É£ Create secure config
      - name: Configure Snowflake connection
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
        run: |
          mkdir -p ~/.snowflake
          cat <<EOF > ~/.snowflake/config.toml
          [connections.default]
          account = "${SNOWFLAKE_ACCOUNT}"
          user = "${SNOWFLAKE_USER}"
          password = "${SNOWFLAKE_PASSWORD}"
          role = "${SNOWFLAKE_ROLE}"
          warehouse = "${SNOWFLAKE_WAREHOUSE}"
          database = "${SNOWFLAKE_DATABASE}"
          schema = "${SNOWFLAKE_SCHEMA}"
          EOF
          chmod 600 ~/.snowflake/config.toml
          echo "‚úÖ Config.toml created."

      # 5Ô∏è‚É£ Verify installation
      - name: Verify Snowflake CLI
        run: |
          which snow
          snow --version

      # 6Ô∏è‚É£ Trigger ML pipeline task
      - name: Trigger ML pipeline
        run: |
          echo "üöÄ Executing ML pipeline task..."
          snow sql -q "USE WAREHOUSE MLOPS_WH; USE DATABASE POWERCONSUMPTION; USE SCHEMA PUBLIC; EXECUTE TASK TASK_1_DATA_INGESTION;"
          echo "‚úÖ Task executed."

      # 7Ô∏è‚É£ Wait then check task status
      - name: Check task status
        run: |
          echo "‚è≥ Waiting 15 s before checking task status..."
          sleep 15
          echo "üìä Task status:"
          snow sql -q "USE DATABASE POWERCONSUMPTION; USE SCHEMA PUBLIC; SHOW TASKS LIKE 'TASK_1_DATA_INGESTION';" --format table

      # 8Ô∏è‚É£ List and download latest ONNX model
      - name: Download latest ONNX model
        run: |
          echo "üìú Listing stage files..."
          mkdir -p models
          # Correct flag: --format
          latest_model=$(snow sql -q "LIST @ML_MODELS_STAGE" --format csv | grep '.onnx' | sort -t',' -k4,4r | head -n 1 | cut -d',' -f1)
          if [ -z "$latest_model" ]; then
            echo "‚ùå No ONNX files found in @ML_MODELS_STAGE!"
            exit 1
          fi
          echo "‚úÖ Latest model: $latest_model"
          snow sql -q "GET @$latest_model file://./models/"
          echo "‚úÖ Model downloaded."

      # 9Ô∏è‚É£ Verify presence
      - name: Verify model download
        run: |
          if ls models/*.onnx 1>/dev/null 2>&1; then
            echo "‚úÖ Model files present:"
            ls -lh models
          else
            echo "‚ùå No model found!"
            exit 1
          fi

      # üîü Upload artifact
      - name: Upload ONNX model artifact
        uses: actions/upload-artifact@v4
        with:
          name: downloaded-onnx-model
          path: models/
          retention-days: 7

      # ‚úÖ Summary
      - name: Summary
        run: echo "‚úÖ End-to-end Snowflake pipeline finished successfully."

