name: Snowflake End-to-End Model Pipeline (SQL Sort Version - Fixed)

on:
  push:
    branches:
      - main   # ‚úÖ Auto-trigger on pushes to main (change branch if needed)

jobs:
  run-snowflake-cli:
    runs-on: ubuntu-latest
    name: Trigger Tasks ‚Üí Wait for Training ‚Üí Fetch Latest ONNX ‚Üí Upload

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Install Snowflake CLI
      - name: Install Snowflake CLI
        run: |
          echo "üß∞ Installing Snowflake CLI..."
          pip install --upgrade snowflake-cli-labs
          snow --version

      # 3Ô∏è‚É£ Configure Snowflake credentials
      - name: Configure Snowflake credentials
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
        run: |
          mkdir -p ~/.snowflake
          cat <<EOF > ~/.snowflake/config.toml
          [connections.default]
          account = "${SNOWFLAKE_ACCOUNT}"
          user = "${SNOWFLAKE_USER}"
          password = "${SNOWFLAKE_PASSWORD}"
          role = "${SNOWFLAKE_ROLE}"
          warehouse = "${SNOWFLAKE_WAREHOUSE}"
          database = "${SNOWFLAKE_DATABASE}"
          schema = "${SNOWFLAKE_SCHEMA}"
          EOF
          chmod 600 ~/.snowflake/config.toml
          echo "‚úÖ Snowflake credentials configured."

      # 4Ô∏è‚É£ Trigger the root task (executes chain 1‚Üí2‚Üí3‚Üí4)
      - name: Trigger Snowflake ML pipeline (root task)
        run: |
          echo "üöÄ Executing pipeline (root task)..."
          snow sql -q "
            USE WAREHOUSE MLOPS_WH;
            USE DATABASE POWERCONSUMPTION;
            USE SCHEMA PUBLIC;
            EXECUTE TASK TASK_1_DATA_INGESTION;
          "
          echo "‚úÖ Root task executed."

      # 5Ô∏è‚É£ Poll until TASK_3_MODEL_TRAINING succeeded recently
      - name: Wait for TASK_3_MODEL_TRAINING to succeed
        run: |
          echo "‚è≥ Waiting for TASK_3_MODEL_TRAINING success..."
          ATTEMPTS=20
          SLEEP_SEC=30
          i=1
          while [ $i -le $ATTEMPTS ]; do
            count=$(snow sql -q "
              SELECT COUNT(*) AS C
              FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY(
                SCHEDULED_TIME_RANGE_START => DATEADD('minute', -45, CURRENT_TIMESTAMP())
              ))
              WHERE name = 'TASK_3_MODEL_TRAINING'
                AND state = 'SUCCEEDED';
            " --format csv | tail -n +2 | cut -d',' -f1)
            echo "üîé success_count(last 45m) = ${count}"
            if [ "${count}" != "0" ]; then
              echo "‚úÖ Training task succeeded recently."
              break
            fi
            i=$((i+1))
            echo "‚Ä¶not done yet, sleeping ${SLEEP_SEC}s"
            sleep ${SLEEP_SEC}
          done
          if [ "${count}" = "0" ]; then
            echo "‚ùå Training task did not report success in time."
            exit 1
          fi

      # 6Ô∏è‚É£ List stage files for debug
      - name: List ONNX files in @ML_MODELS_STAGE (debug)
        run: |
          echo "üìú Stage listing:"
          snow sql -q "LIST @ML_MODELS_STAGE PATTERN='.*\\.onnx'" --format table

      # 7Ô∏è‚É£ Fetch newest ONNX model (Snowflake does sorting)
      - name: Download newest ONNX model (SQL-based sort)
        run: |
          echo "üì• Fetching latest ONNX model using Snowflake sort..."
          mkdir -p models

          latest_file=$(snow sql -q "
            LIST @ML_MODELS_STAGE PATTERN='.*\\.onnx';
            SELECT name
            FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-1)))
            ORDER BY last_modified DESC
            LIMIT 1;
          " --format csv | tail -n +2 | head -n1 | cut -d',' -f1)

          if [ -z "$latest_file" ]; then
            echo "‚ùå No ONNX files found in @ML_MODELS_STAGE!"
            exit 1
          fi

          echo "‚úÖ Latest ONNX file: $latest_file"
          snow sql -q "GET @ML_MODELS_STAGE/$latest_file file://./models/"
          echo "‚úÖ Model downloaded into ./models"

      # 8Ô∏è‚É£ Verify the downloaded model
      - name: Verify downloaded model
        run: |
          echo "üîé Verifying downloaded ONNX..."
          ls -lh models || true
          if ! ls models/*.onnx 1>/dev/null 2>&1; then
            echo "‚ùå No .onnx files were downloaded."
            exit 1
          fi
          echo "‚úÖ ONNX model present."

      # 9Ô∏è‚É£ Upload artifact to GitHub
      - name: Upload exported ONNX model
        uses: actions/upload-artifact@v4
        with:
          name: exported-onnx-model
          path: models/
          retention-days: 7

      # üîü Summary
      - name: Summary
        run: |
          echo "‚úÖ End-to-end pipeline completed."
          echo "‚úÖ Latest model trained by TASK_3 and fetched from @ML_MODELS_STAGE (SQL-based sort)."
