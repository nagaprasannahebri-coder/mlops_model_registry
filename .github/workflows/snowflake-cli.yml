name: Snowflake End-to-End Model Pipeline (Stage Export)

on:
  workflow_dispatch:

jobs:
  run-snowflake-cli:
    runs-on: ubuntu-latest
    name: Trigger Tasks ‚Üí Fetch Latest Model from Stage ‚Üí Upload

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Install Snowflake CLI (dev build optional)
      - name: Install Snowflake CLI
        run: |
          echo "üß∞ Installing Snowflake CLI..."
          pip install --upgrade "snowflake-cli-labs"
          snow --version

      # 3Ô∏è‚É£ Configure Snowflake credentials
      - name: Configure Snowflake credentials
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
        run: |
          mkdir -p ~/.snowflake
          cat <<EOF > ~/.snowflake/config.toml
          [connections.default]
          account = "${SNOWFLAKE_ACCOUNT}"
          user = "${SNOWFLAKE_USER}"
          password = "${SNOWFLAKE_PASSWORD}"
          role = "${SNOWFLAKE_ROLE}"
          warehouse = "${SNOWFLAKE_WAREHOUSE}"
          database = "${SNOWFLAKE_DATABASE}"
          schema = "${SNOWFLAKE_SCHEMA}"
          EOF
          chmod 600 ~/.snowflake/config.toml
          echo "‚úÖ Snowflake credentials configured."

      # 4Ô∏è‚É£ Trigger ML pipeline
      - name: Trigger Snowflake ML pipeline
        run: |
          echo "üöÄ Executing pipeline..."
          snow sql -q "USE WAREHOUSE MLOPS_WH; USE DATABASE POWERCONSUMPTION; USE SCHEMA PUBLIC; EXECUTE TASK TASK_1_DATA_INGESTION;"
          echo "‚úÖ Tasks executed successfully."

      # 5Ô∏è‚É£ Wait and verify
      - name: Check task status
        run: |
          echo "‚è≥ Waiting 15 seconds before checking task status..."
          sleep 15
          snow sql -q "USE DATABASE POWERCONSUMPTION; USE SCHEMA PUBLIC; SHOW TASKS LIKE 'TASK_1_DATA_INGESTION';" --format table
          echo "‚úÖ Task chain verified."

      # 6Ô∏è‚É£ Download latest ONNX model from stage
      - name: Download latest ONNX model from @ML_MODELS_STAGE
        run: |
          echo "üì• Fetching latest ONNX model from stage..."
          mkdir -p models
          latest_file=$(snow sql -q "LIST @ML_MODELS_STAGE PATTERN='.*\\.onnx'" --format csv | sort -t',' -k4,4r | head -n1 | cut -d',' -f1)
          if [ -z "$latest_file" ]; then
            echo "‚ùå No ONNX file found in @ML_MODELS_STAGE!"
            exit 1
          fi
          echo "‚úÖ Latest file: $latest_file"
          snow sql -q "GET @$latest_file file://./models/"
          echo "‚úÖ Model downloaded into ./models"

      # 7Ô∏è‚É£ Verify exported model
      - name: Verify model artifact
        run: |
          if ls models/*.onnx 1>/dev/null 2>&1; then
            echo "‚úÖ Model file(s) found:"
            ls -lh models
          else
            echo "‚ùå No ONNX model downloaded!"
            exit 1
          fi

      # 8Ô∏è‚É£ Upload as GitHub artifact
      - name: Upload exported ONNX model
        uses: actions/upload-artifact@v4
        with:
          name: exported-onnx-model
          path: models/
          retention-days: 7

      # ‚úÖ Final summary
      - name: Summary
        run: |
          echo "‚úÖ Pipeline completed successfully!"
          echo "‚úÖ Model downloaded from @ML_MODELS_STAGE and uploaded as artifact!"
