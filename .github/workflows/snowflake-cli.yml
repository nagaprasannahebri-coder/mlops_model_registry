name: Snowflake Model Registry End-to-End Pipeline

on:
  workflow_dispatch:

jobs:
  run-snowflake-cli:
    runs-on: ubuntu-latest
    name: Trigger Task ‚Üí Verify Status ‚Üí Export Latest Model ‚Üí Upload Artifact

    steps:
      # 1Ô∏è‚É£ Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Install Snowflake CLI with ML support
      - name: Install latest Snowflake CLI
        run: |
          pip install --upgrade snowflake-cli-labs
          snow --version

      # 3Ô∏è‚É£ Configure Snowflake connection
      - name: Configure Snowflake credentials
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
        run: |
          mkdir -p ~/.snowflake
          cat <<EOF > ~/.snowflake/config.toml
          [connections.default]
          account = "${SNOWFLAKE_ACCOUNT}"
          user = "${SNOWFLAKE_USER}"
          password = "${SNOWFLAKE_PASSWORD}"
          role = "${SNOWFLAKE_ROLE}"
          warehouse = "${SNOWFLAKE_WAREHOUSE}"
          database = "${SNOWFLAKE_DATABASE}"
          schema = "${SNOWFLAKE_SCHEMA}"
          EOF
          chmod 600 ~/.snowflake/config.toml
          echo "‚úÖ Snowflake config.toml ready"

      # 4Ô∏è‚É£ Trigger ML pipeline task
      - name: Trigger ML pipeline
        run: |
          echo "üöÄ Executing ML pipeline..."
          snow sql -q "USE WAREHOUSE MLOPS_WH; USE DATABASE POWERCONSUMPTION; USE SCHEMA PUBLIC; EXECUTE TASK TASK_1_DATA_INGESTION;"
          echo "‚úÖ Task executed."

      # 5Ô∏è‚É£ Wait & check status
      - name: Check task status
        run: |
          echo "‚è≥ Waiting 15s before checking task status..."
          sleep 15
          snow sql -q "USE DATABASE POWERCONSUMPTION; USE SCHEMA PUBLIC; SHOW TASKS LIKE 'TASK_1_DATA_INGESTION';" --format table

      # 6Ô∏è‚É£ Identify latest registered model (correct column)
      - name: Identify latest registered model
        run: |
          echo "üì¶ Checking latest registered model..."
          mkdir -p models
          # Sort by created_on (col 1) descending, extract name (col 2)
          latest_model=$(snow sql -q "SHOW MODELS IN SCHEMA PUBLIC;" --format csv \
            | grep POWER_CONSUMPTION_MODEL \
            | sort -t',' -k1,1r \
            | head -n1 \
            | cut -d',' -f2 \
            | tr -d '"')
          if [ -z "$latest_model" ]; then
            echo "‚ùå No models found in registry!"
            exit 1
          fi
          echo "‚úÖ Latest registered model: $latest_model"
          echo "LATEST_MODEL=$latest_model" >> $GITHUB_ENV

      # 7Ô∏è‚É£ Export model from registry
      - name: Export latest model
        run: |
          echo "üì§ Exporting model $LATEST_MODEL ..."
          snow ml model export "$LATEST_MODEL" --file-format onnx --output-dir ./models
          echo "‚úÖ Model exported."

      # 8Ô∏è‚É£ Verify export
      - name: Verify exported model
        run: |
          if ls models/*.onnx 1>/dev/null 2>&1; then
            echo "‚úÖ Model file(s) found:"
            ls -lh models
          else
            echo "‚ùå No model exported!"
            exit 1
          fi

      # 9Ô∏è‚É£ Upload artifact
      - name: Upload exported model
        uses: actions/upload-artifact@v4
        with:
          name: exported-onnx-model
          path: models/
          retention-days: 7

      # ‚úÖ Summary
      - name: Summary
        run: echo "‚úÖ Latest model exported from registry and uploaded successfully!"
